# Auto-generated using compose2nix v0.2.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."gitlab-runner-chaotic" = {
    image = "gitlab/gitlab-runner:alpine";
    volumes = [
      "/etc/gitlab-runner/chaotic:/etc/gitlab-runner:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=gitlab-runner-chaotic"
      "--network=gitlab-runner_default"
    ];
  };
  systemd.services."docker-gitlab-runner-chaotic" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-gitlab-runner_default.service"
    ];
    requires = [
      "docker-network-gitlab-runner_default.service"
    ];
    partOf = [
      "docker-compose-gitlab-runner-root.target"
    ];
    wantedBy = [
      "docker-compose-gitlab-runner-root.target"
    ];
    unitConfig.RequiresMountsFor = [
      "/etc/gitlab-runner/chaotic"
      "/var/run/docker.sock"
    ];
  };
  virtualisation.oci-containers.containers."gitlab-runner-dind" = {
    image = "gitlab/gitlab-runner:alpine";
    volumes = [
      "/etc/gitlab-runner/dind:/etc/gitlab-runner:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=gitlab-runner-dind"
      "--network=gitlab-runner_default"
    ];
  };
  systemd.services."docker-gitlab-runner-dind" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-gitlab-runner_default.service"
    ];
    requires = [
      "docker-network-gitlab-runner_default.service"
    ];
    partOf = [
      "docker-compose-gitlab-runner-root.target"
    ];
    wantedBy = [
      "docker-compose-gitlab-runner-root.target"
    ];
    unitConfig.RequiresMountsFor = [
      "/etc/gitlab-runner/dind"
      "/var/run/docker.sock"
    ];
  };
  virtualisation.oci-containers.containers."gitlab-runner-garuda" = {
    image = "gitlab/gitlab-runner:alpine";
    volumes = [
      "/etc/gitlab-runner:/etc/gitlab-runner:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=gitlab-runner-garuda"
      "--network=gitlab-runner_default"
    ];
  };
  systemd.services."docker-gitlab-runner-garuda" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-gitlab-runner_default.service"
    ];
    requires = [
      "docker-network-gitlab-runner_default.service"
    ];
    partOf = [
      "docker-compose-gitlab-runner-root.target"
    ];
    wantedBy = [
      "docker-compose-gitlab-runner-root.target"
    ];
    unitConfig.RequiresMountsFor = [
      "/etc/gitlab-runner"
      "/var/run/docker.sock"
    ];
  };
  virtualisation.oci-containers.containers."watchtower" = {
    image = "containrrr/watchtower:1.7.1";
    volumes = [
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    cmd = [ "--cleanup" "gitlab-runner-chaotic" "gitlab-runner-garuda" "gitlab-runner-dind" ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=watchtower"
      "--network=gitlab-runner_default"
    ];
  };
  systemd.services."docker-watchtower" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-gitlab-runner_default.service"
    ];
    requires = [
      "docker-network-gitlab-runner_default.service"
    ];
    partOf = [
      "docker-compose-gitlab-runner-root.target"
    ];
    wantedBy = [
      "docker-compose-gitlab-runner-root.target"
    ];
    unitConfig.RequiresMountsFor = [
      "/var/run/docker.sock"
    ];
  };

  # Networks
  systemd.services."docker-network-gitlab-runner_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f gitlab-runner_default";
    };
    script = ''
      docker network inspect gitlab-runner_default || docker network create gitlab-runner_default
    '';
    partOf = [ "docker-compose-gitlab-runner-root.target" ];
    wantedBy = [ "docker-compose-gitlab-runner-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-gitlab-runner-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

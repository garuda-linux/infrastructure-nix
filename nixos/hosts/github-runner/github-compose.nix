# Auto-generated using compose2nix v0.2.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."github-runner" = {
    image = "myoung34/github-runner:latest";
    environment = {
      "EPHEMERAL" = "true";
      "LABELS" = "nyxbuilder";
      "ORG_NAME" = "chaotic-cx";
      "RUNNER_NAME" = "immortalis";
      "RUNNER_SCOPE" = "org";
      "RUNNER_WORKDIR" = "/tmp/runner/work";
    };
    volumes = [
      "/tmp/runner:/tmp/runner:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=github-runner"
      "--network=github-runner_default"
      "--privileged"
    ];
    environmentFiles = [
      "/var/garuda/secrets/github-runner.env"
    ];
  };
  systemd.services."docker-github-runner" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-github-runner_default.service"
    ];
    requires = [
      "docker-network-github-runner_default.service"
    ];
    partOf = [
      "docker-compose-github-runner-root.target"
    ];
    wantedBy = [
      "docker-compose-github-runner-root.target"
    ];
    unitConfig.RequiresMountsFor = [
      "/tmp/runner"
    ];
  };

  # Networks
  systemd.services."docker-network-github-runner_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f github-runner_default";
    };
    script = ''
      docker network inspect github-runner_default || docker network create github-runner_default
    '';
    partOf = [ "docker-compose-github-runner-root.target" ];
    wantedBy = [ "docker-compose-github-runner-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-github-runner-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
